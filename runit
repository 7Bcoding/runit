#!/bin/bash
#
# Copyright (c) 2020 Baidu.com,Inc. All Right Reserved
#
# Author: cenquanyu@baidu.com
# Date: 2020/11/10
#
# Brief:
#   runit is a start managment tool for applications.It loads enviroment
#   variabes from .env file and start applicaitons from Procfile
# Globals:
#   PORT COLOR_ARRAY color_idx
# Arguments:
#   -c check
#   -f procfile
#   -e envfile
#   -h help
# Returns:
#   succ:0
#   fail:1

set -a
set -o pipefail
PORT=8080
COLOR_ARRAY=('31' '32' '33' '34' '35' '36' '37')
color_idx=0
# variable
procfile=""
envfile=""

##############################################################################
# Brief:
#  usage
# Globals:
#  none
# Arguments:
#  none
# Returns:
#  none
##############################################################################
function usage() {
  echo "Usage: runit [-c] [-f procfile|Procfile] [-e envfile|.env]
    Options:
     -c: Check procfile and envfile
     -e: Load envfile
     -f: Run procfile
     -h: help information
    "
}

##############################################################################
# Brief:
#  verify the procfile
# Globals:
#  none
# Arguments:
#  procfile
# Returns:
#  succ: 0
#  fail: 1
##############################################################################
function verify_proc() {
    local proc_file="$1"
    local retcode=0

    [[ ! -f "${proc_file}" ]] && err_print "verify procfile not exists" && return 1

    while read line ; do
        if echo "${line}" | grep -v ":"; then
            err_print "no_colon_command"
            continue
        fi
        proc_name="${line%%:*}"
        proc_value="${line#*:}"
        echo "${proc_name}" | grep -q "[^a-zA-Z_]" && err_print "invalid_char" && retcode=1
    done < <(grep -vE "^[[:space:]]*#" "${proc_file}")
    return ${retcode}
}
##############################################################################
# Brief:
#  verify the envfile
# Globals:
#  none
# Agruments:
#  envfile
# Returns:
#  succ: 0
#  fail: 1
##############################################################################
function verify_env() {
    local env_file="$1"
    local retcode=0

    [[ ! -f "${env_file}" ]] && err_print "verify envfile not exists" && return 1
    while read line; do
        if echo "${line}" | grep -v "="; then
            err_print "no_equal_mark"
            continue
        fi
        env_name="${line%%=*}"
        env_value="${line#*=}"
        echo "${env_name}" | grep -q "[^a-zA-Z_]" && err_print "invalid_char" && retcode=1
        echo "${env_value}" | grep -qE "[[:space:]]" && err_print "value_have_space" && retcode=1
    done < <(grep -vE "^[[:space:]]*#" "${env_file}" | grep -v "^$")
    return ${retcode}
}
##############################################################################
# Brief:
#  echo the error information
# Globals:
#  none
# Arguments:
#  errinfo
# Returns:
#  none
##############################################################################
function err_print() {
  errinfo="$1"
  echo "${errinfo}"
}

function log() {
  local name="$1"
  local command="$2"
  local color="$3"
  time=$(date +%H:%M:%s)
  printf "\E[${color}m${time} %-7s] | " "${name}"
  # clear all set colors
  tput sgr0
  echo "${command}"
  return 0
}

##############################################################################
# Brief:
#  Perform start command and print log on screen
# Globals:
#  COLOR_ARRAY
# Arguments:
#  $1: proc name
#  $2: proc command
# Returns：
#  succ: 0
#  fail: 1
##############################################################################
function run_command() {
    local proc_name="$1"
    local command="$2"
    # get proc pid
    local cmd_pid=$!
    local cur_color="${COLOR_ARRAY[$color_idx]}"
    local cmd_port=$(echo "${command}" | grep -e "\$PORT")
   # set 8080 for default PORT
    [[ -n "${cmd_port}" ]] && [[ -z "${PORT}" ]] && PORT=8080
    bash -c "${command}" > >(
        while read output; do
            log "${proc_name}" "${output}" "${COLOR}"
        done
    ) 2>&1 &

    local output="$(eval echo \"${command}\")"
    log "${proc_name}" "${output} start with pid ${cmd_pid}" "${cur_color}"
    [[ $? -ne 0 ]] && return 1
    # PORT increases when it was used
    [[ -n "${cmd_port}" ]] && PORT=$((${PORT} + 1))
    # Color increases
    (( color_idx ++ ))

    return 0
}
##############################################################################
# Brief:
#  Load the env_file
# Globals:
#  none
# Arguments:
#  envfile
# Returns:
#  succ: 0
#  fail: 1
##############################################################################
function load_env_file() {
  set -a
  local env_file="$1"
  # if envfile is null，load .env from current directory
  for env in $(echo "${env_file}"); do
    [[ -f "${env}" ]] && source "${env}"
  done
  return 0
}
##############################################################################
# Brief:
#  Run process from Profile, Ctrl + C terminates all processes
# Globals:
#  none
# Arguments:
#  procfile
# Returns:
#  succ:0
#  fail:1
##############################################################################

function run_procfile() {
    local procfile="$1"
    # if procfile is null,use default in current directory
    local proc=${procfile:-./Procfile}
    if [[ ! -s "${proc}" ]];then
        err_print "This procfile is not exists"
        return 1
    fi
    while read line;do
        local proc_name=${line%%:*}
        local command=${line#*:}
        local proc_cmd=$(echo $command)
        run_command "${proc_name}" "${proc_cmd}"
        [[ $? -ne 0 ]] && return 1
    done < <(grep -vE '^[[:space:]]*#|^[[:space:]]*$|^$' "${proc}")
    trap "kill 0" SIGINT SIGTERM
    return 0
}
##############################################################################
# Brief:
#  Main procedure
# Globals:
#  procfile envfile
# Arguments:
#  none
# Returns:
#  none
##############################################################################
function main() {
  local check=false
  while getopts "f:e:ch" OPT; do
    case ${OPT} in
    c) check=true ;;
    f) procfile="${OPTARG}" ;;
    e) envfile="${OPTARG}" ;;
    *) usage ;;
    esac
  done

  if ${check}; then
    if [[ -n "${procfile}" ]]; then
      verify_proc "${procfile}"
      proc_retcode=$?
      [[ ${proc_retcode} -ne 0 ]] && exit 1
    else
      err_print "The procfile is null"
      exit 1
    fi

    if [[ -z "${envfile}" ]]; then
      envfile="./.env"
    fi
    verify_env "${envfile}"
    env_retcode=$?
    [[ ${env_retcode} -ne 0 ]] && exit 1

  else
    if [[ -z "${envfile}" ]]; then
      envfile="./.env"
    fi

    load_env_file "${envfile}"
    env_retcode=$?
    [[ ${env_retcode} -ne 0 ]] && exit 1

    if [[ -z "${procfile}" ]]; then
      procfile="./Procfile"
    fi

    run_procfile "${procfile}"
    proc_retcode=$?
    [[ proc_retcode -ne 0 ]] && exit 1
  fi
  exit 0
}

main "$@"
wait


